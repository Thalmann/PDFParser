using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using DeadDog;
using Google.Apis.Calendar.v3.Data;

namespace IKEAPDFPArser
{
    public class TextToEvent
    {
        public TextToEvent()
        {
        }

        private int startYear, startMonth, startDay, startHour, startMinute, endYear, endMonth, endDay, endHour, endMinute;

        public List<CalendarEvent> TextToEvents(string[] source)
        {
            List<CalendarEvent> listOfEvents = new List<CalendarEvent>();

            bool yearChanged = false;
            //bool IKEADoc = false;

            int lineNumber = 0;

            foreach (string line in source)
            {
                string temp;
                string[] tempA;
                lineNumber++;

                CalendarEvent cEvent = new CalendarEvent();

                cEvent.Title = "Arbejde IKEA";


                //Get next string line, because there is no space for the whole message on the actual line
                if (!(lineNumber == source.Count()))
                {
                    string s = source[lineNumber];
                    if (line.Contains("ikke fysisk tilstede"))
                    {
                        cEvent.Title = "Arbejde IKEA - IKKE FYSISK TILSTEDE";
                    }
                    if (s.Contains("møde"))
                    {
                        cEvent.Title = "Arbejde IKEA - INTERNT MØDE";
                    }
                    if (s.Contains("udviklingsam"))
                    {
                        cEvent.Title = "Arbejde IKEA - UDVIKLINGSSAMTALE";
                    }
                }


                if (!line.Contains("Fri") && (line.Contains("Mandag") || line.Contains("Tirsdag") || line.Contains("Onsdag") || line.Contains("Torsdag") || line.Contains("Fredag") || line.Contains("Lørdag") || line.Contains("Søndag")))
                {
                    bool clockCheckedStart = false, clockCheckedEnd = false, dateChecked = false, test = true;
                    tempA = Regex.Replace(line, "(- )|(: )", "").Split(new string[] { }, StringSplitOptions.RemoveEmptyEntries);
                    foreach (string s in tempA)
                    {
                       

                        test = true;
                        if (clockCheckedStart == false)
                        {
                            if (s.Contains(":"))
                            {
                                temp = s.CutToFirst(":", CutDirection.Right, true);
                                if (int.TryParse(temp, out startHour) == false)
                                {
                                    return null;
                                }

                                temp = s.CutToFirst(":", CutDirection.Left, true);
                                if (int.TryParse(temp, out startMinute) == false)
                                {
                                    return null;
                                }
                                clockCheckedStart = true;
                                test = false;
                            }
                        }
                        if (clockCheckedEnd == false && test == true)
                        {
                            if (s.Contains(":"))
                            {
                                temp = s.CutToFirst(":", CutDirection.Right, true);
                                if (int.TryParse(temp, out endHour) == false)
                                {
                                    return null;
                                }

                                temp = s.CutToFirst(":", CutDirection.Left, true);
                                if (int.TryParse(temp, out endMinute) == false)
                                {
                                    return null;
                                }
                                clockCheckedEnd = true;
                            }
                        }

                        if (dateChecked == false)
                        {
                            if (s.Contains("-") && !(s.Contains("005-8510")) && !(s.Contains("005-6190")) && !(s.Contains("005-6160")) && !(s.Contains("005-3530")))
                            {
                                temp = s.CutToFirst("-", CutDirection.Right, true);
                                if (int.TryParse(temp, out startDay) == false)
                                {
                                    return null;
                                }

                                temp = s.CutToFirst("-", CutDirection.Left, true);
                                if (int.TryParse(temp, out startMonth) == false)
                                {
                                    return null;
                                }
                                dateChecked = true;
                            }
                        }

                    }
                    if (startMonth == 1)
                    {
                        startYear = 2015;
                        endYear = 2015;
                        yearChanged = true;
                    }
                    else if (yearChanged == false)
                    {
                        startYear = 2014;
                        endYear = 2014;
                    }



                    endDay = startDay;
                    endMonth = startMonth;

                    DateTime start = new DateTime(startYear, startMonth, startDay, startHour, startMinute, 0);
                    DateTime end = new DateTime(endYear, endMonth, endDay, endHour, endMinute, 0);


                    cEvent.Start = start;
                    cEvent.End = end;

                    listOfEvents.Add(cEvent);
                }

            }

            return listOfEvents;
        }
        
    }
}
